import React, { useRef, useEffect, useState } from "react";
import { supabase } from "../../supabaseClient.js";
import { v4 as uuidv4 } from "uuid";

const ResearchModify = ({ formData, setFormData, onSave }) => {
  const coverInputRef = useRef(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [departmentOptions, setDepartmentOptions] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [pageCount, setPageCount] = useState(0);

  const collegeDepartmentMap = {
    "CAMS": [],
    "CLAE": [],
    "CBA": [],
    "COECSA": ["DOA", "DCS", "DOE"],
    "CFAD": [],
    "CITHM": [],
    "CON": []
  };

  useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const initialFormData = {
      title: queryParams.get("title") || '',
      author: queryParams.get("author") || '',
      college: queryParams.get("college") || '',
      department: queryParams.get("department") || '',
      abstract: queryParams.get("abstract") || '',
      keywords: queryParams.get("keywords") || '',
      pubDate: queryParams.get("pubDate") || '',
      location: queryParams.get("location") || '',
      researchID: queryParams.get("researchID") || '',
      arcID: queryParams.get("arcID") || '',
      cover: queryParams.get("cover") || '',
    };

    setFormData(initialFormData);
  }, [location.search, setFormData]);

  useEffect(() => {
    if (formData.college) {
      updateDepartmentOptions(formData.college);
    }
  }, [formData.college]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleReset = async () => {
    const queryParams = new URLSearchParams(location.search);
    const initialFormData = {
      title: queryParams.get("title") || '',
      author: queryParams.get("author") || '',
      college: queryParams.get("college") || '',
      department: queryParams.get("department") || '',
      abstract: queryParams.get("abstract") || '',
      keywords: queryParams.get("keywords") || '',
      pubDate: queryParams.get("pubDate") || '',
      location: queryParams.get("location") || '',
      researchID: queryParams.get("researchID") || '',
      arcID: queryParams.get("arcID") || '',
      cover: queryParams.get("cover") || '',
    };

    console.log(initialFormData)

    setFormData(initialFormData);
  }

  const handleSave = async () => {
    if (!formData || !formData.researchID) {
      console.error("Invalid form data or missing researchID");
      return;
    }

    const { researchID, ...updateData } = formData;

    try {
      const { data, error } = await supabase
        .from("research")
        .update(updateData)
        .match({ researchID });

      if (error) throw error;

      console.log("Research updated successfully:", data);
      if (onSave) await onSave(formData);
    } catch (err) {
      console.error("Error updating research:", err);
    }
  };

  const updateDepartmentOptions = (college) => {
    const options = collegeDepartmentMap[college] || [];
    setDepartmentOptions(options);

    setFormData((prevData) => ({
      ...prevData,
      department: options.length > 0 && options.includes(prevData.department) ? prevData.department : "",
    }));
  };

  const uploadCover = async (e) => {
    let coverFile = e.target.files[0];
    const filePath = `${uuidv4()}_${coverFile.name}`;

    const { data, error } = await supabase.storage.from("research-covers").upload(filePath, coverFile, {
      cacheControl: "3600",
      upsert: false,
    });

    if (error) {
      console.error("Error uploading image: ", error);
    } else {
      const { data: publicData, error: urlError } = supabase.storage.from("research-covers").getPublicUrl(filePath);

      if (urlError) {
        console.error("Error getting public URL: ", urlError.message);
      } else {
        setFormData({ ...formData, cover: publicData.publicUrl });
      }
    }
  };

  //Checks if the cover image input field was clicked
  const handleCoverClick = () => {
    coverInputRef.current.click();
  };

  // Separate function to handle file uploads
  const handleFileSelect = async (files) => {
    console.log("Files received in handleFileSelect:", files);

    if (!Array.isArray(files)) {
      setUploadedFiles([]);
      setPageCount(0);
      return;
    }

    setUploadedFiles(files);
    setPageCount(files.length);

    // Check for the first file and set it as the cover
    const firstFile = files[0];
    if (!firstFile) return;

    try {
      // If the first file is an image
      if (firstFile.type.startsWith("image/")) {
        const filePath = `${uuidv4()}_${firstFile.name}`;
        const { error } = await supabase.storage.from("research-covers").upload(filePath, firstFile, {
          cacheControl: "3600",
          upsert: false,
        });

        if (error) {
          console.error("Error uploading image cover: ", error);
        } else {
          const { data: publicData, error: urlError } = supabase.storage.from("research-covers").getPublicUrl(filePath);
          if (urlError) {
            console.error("Error getting public URL for cover image: ", urlError.message);
          } else {
            setFormData((prevData) => ({
              ...prevData,
              cover: publicData.publicUrl, // Set the public URL as the cover
              pages: files.length,
            }));
          }
        }
      }
      // If the first file is a PDF
      else if (firstFile.type === "application/pdf") {
        // Extract the first page of the PDF as an image (requires a library like `pdfjs-dist`)
        const fileReader = new FileReader();
        fileReader.onload = async () => {
          const pdfData = new Uint8Array(fileReader.result);

          // Use pdfjs-dist to load the PDF and render the first page as an image
          const pdf = await pdfjsLib.getDocument({ data: pdfData }).promise;

          const totalPages = pdf.numPages;

          const page = await pdf.getPage(1);
          const viewport = page.getViewport({ scale: 1.5 });

          // Render the page to a canvas
          const canvas = document.createElement("canvas");
          canvas.width = viewport.width;
          canvas.height = viewport.height;

          const context = canvas.getContext("2d");
          await page.render({ canvasContext: context, viewport }).promise;

          // Convert canvas to a Blob (image)
          canvas.toBlob(async (blob) => {
            const filePath = `${uuidv4()}_cover.jpg`;
            const { error } = await supabase.storage.from("research-covers").upload(filePath, blob, {
              cacheControl: "3600",
              upsert: false,
            });

            if (error) {
              console.error("Error uploading cover from PDF: ", error);
            } else {
              const { data: publicData, error: urlError } = supabase.storage.from("research-covers").getPublicUrl(filePath);
              if (urlError) {
                console.error("Error getting public URL for cover image: ", urlError.message);
              } else {
                setFormData((prevData) => ({
                  ...prevData,
                  cover: publicData.publicUrl, // Set the public URL as the cover
                  pages: totalPages,
                }));
              }
            }
          }, "image/jpeg");
        };

        fileReader.readAsArrayBuffer(firstFile);
      }
    } catch (error) {
      console.error("Error processing cover file:", error);
    }
  };


  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-white border border-grey rounded-lg p-4 w-full h-fit">
        <h2 className="text-2xl font-semibold mb-4">Research Modify</h2>
        <div className='flex'>
          {/* Left Side: Form Section */}
          <div className="w-2/3">
            <p className="text-gray-600 mb-8">
              Data points marked with an asterisk (*) are autofilled. Use a semicolon (;) or comma (,) to add multiple authors and keywords.
            </p>

            <h3 className="text-xl font-semibold my-2">Research Paper Upload</h3>

            <div className="flex-col justify-between items-center mb-6 space-y-2">
              <div className="">
                <p>Upload research pages to autofill. Include the Title Page, Abstract, and Keywords for best results.</p>
                <p className="text-gray-500">Accepted formats: (*.pdf, *.png, *.jpeg)</p>
              </div>
              <div className="flex justify-end w-full">
                <button
                  className="add-book w-1/3 mb-2 px-4 py-2 rounded-lg border-grey hover:bg-light-gray transition"
                  onClick={() => setIsModalOpen(true)}
                >
                  Upload Pages
                </button>
              </div>
            </div>

            {uploadedFiles.length > 0 && (
              <p className="text-grey mb-4">
                Uploaded Files: {uploadedFiles.map(file => file.name).join(', ')}
              </p>
            )}

            <h3 className="text-xl font-semibold my-2">Research Paper Information</h3>

            <form className="space-y-2">
              <div className="flex justify-between items-center">
                <label className="w-1/4">Title:</label>
                <input type="text" name="title" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={formData.title} onChange={handleChange} placeholder="Full Research Title" required />
              </div>
              <div className="flex justify-between items-center">
                <label className="w-1/4">Authors:</label>
                <input type="text" name="author" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={formData.author} onChange={handleChange} placeholder="Author 1; Author 2; Author 3;..." required />
              </div>
              <div className="flex justify-between items-center">
                <label className="w-1/4">College:</label>
                <div className="select-dropdown-wrapper w-2/3">
                  <select
                    name="college"
                    className="w-full px-3 py-1 rounded-full border border-grey"
                    value={formData.college}
                    onChange={(e) => {
                      handleChange(e);
                      updateDepartmentOptions(e.target.value);
                    }}
                  >
                    <option value="">Select a college</option>
                    {Object.keys(collegeDepartmentMap).map((college) => (
                      <option key={college} value={college}>
                        {college}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              {formData.college === "COECSA" && (
                <div className="flex justify-between items-center">
                  <label className="w-1/4">Department:</label>
                  <div className="select-dropdown-wrapper w-2/3">
                    <select
                      name="department"
                      className="w-full px-3 py-1 rounded-full border border-grey"
                      value={formData.department}
                      onChange={handleChange}
                    >
                      <option value="">Select a department</option>
                      {departmentOptions.map((department) => (
                        <option key={department} value={department}>
                          {department}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}

              <div className="flex justify-between items-center">
                <label className="w-1/4">Abstract:</label>
                <textarea name="abstract" required
                  className="w-2/3 px-3 py-1 rounded-2xl border border-grey min-h-48" 
                  value={formData.abstract} 
                  onChange={handleChange} 
                  placeholder="Full Abstract Text" 
                  />
              </div>
              <div className="flex justify-between items-center">
                <label className="w-1/4">Pages:</label>
                <input type="number" name="pages" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={pageCount} placeholder="No. of pages" required />
              </div>
              <div className="flex justify-between items-center">
                <label className="w-1/4">Keywords:</label>
                <input type="text" name="keyword" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={formData.keyword} onChange={handleChange} placeholder="Keyword 1; Keyword 2; Keyword 3;..." required />
              </div>
              <div className="flex justify-between items-center">
                <label className="w-1/4">Date Published:</label>
                <input type="date" name="pubDate" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={formData.pubDate} onChange={handleChange} required />
              </div>
              <div className="flex justify-between items-center">
                <label className="w-1/4">Location:</label>
                <input type="text" name="location" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={formData.location} onChange={handleChange} placeholder="Shelf Location" required />
              </div>
              <div className="justify-between items-center hidden">
                <label className="w-1/4">Database ID*:</label>
                <input type="number" name="researchID" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={formData.researchID} onChange={handleChange} required />
              </div>
              <div className="flex justify-between items-center">
                <label className="w-1/4">ARC ID:</label>
                <input type="text" name="researchARCID" className="w-2/3 px-3 py-1 rounded-full border border-grey" value={formData.researchARCID} onChange={handleChange} placeholder="ARC Issued ID, eg. LPUCAV012345" required />
              </div>
            </form>


          </div>

          {/* Right Side: Research Cover Placeholder */}
          <div className="flex flex-col items-center px-2 w-1/3 justify-end">
            <label className="text-md mb-2">Research Cover:</label>
            <div className="w-full h-fit flex justify-center">
              <div className="border border-grey p-4 w-fit rounded-lg  hover:bg-light-gray transition" onClick={handleCoverClick}>
                <img
                  src={formData.cover || '/image/book_research_placeholder.png'}
                  alt="Research cover placeholder"
                  className="h-[375px] w-[225px] object-cover rounded-lg border border-grey"
                />
              </div>
            </div>
            <p className="text-sm text-gray-500 text-center m-2">Click to change research cover</p>

            <input type="file" ref={coverInputRef} required className="hidden" onChange={uploadCover} accept="image/png, image/jpeg, image/jpg" />
          </div>
        </div>

        <div className="flex justify-center mt-8 gap-2">
          <button
            type="button"
            onClick={handleReset}
            className="add-book w-1/4 mb-2 px-4 py-2 rounded-lg border-grey hover:bg-light-gray transition"
          >
            Reset Changes
          </button>
          <button
            type="button"
            onClick={handleSave}
            className="add-book w-1/4 mb-2 px-4 py-2 rounded-lg border-grey hover:bg-light-gray transition"
          >
            Save Changes
          </button>
        </div>
      </div>
    </div>
  );
};

export default ResearchModify;
